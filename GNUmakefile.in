# Master makefile for libzeep
#
#          copyright 2019, Maarten L. Hekkelman
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)
#

SHELL 				= @SHELL@

.PHONY: firstTarget
firstTarget: all

CXX					= @CXX@
CXXFLAGS			= @CXXFLAGS@ @BOOST_CPPFLAGS@
LDFLAGS				= @LDFLAGS@ @BOOST_LDFLAGS@
LIBS				= @LIBS@

prefix				= @prefix@
exec_prefix			= @exec_prefix@
libdir				= @libdir@
datarootdir			= @datarootdir@
includedir			= @includedir@
docdir				= @docdir@
pkgconfigdir		= $(libdir)/pkgconfig

BOOST_LIBS			= program_options
ZEEP_LIBS			= http json xml

LIBS				+= $(BOOST_LIBS:%=-lboost_%) $(ZEEP_LIBS:%=-lzeep-%)

ifneq "$(CHECK_CONFIG)" ""

GNUmakefile: config.status GNUmakefile.in
	$(SHELL) ./config.status

config.status: configure
	$(SHELL) ./config.status --recheck

configure: configure.ac
	autoconf

endif

# libtool stuff

LIBTOOL_DEPS = @LIBTOOL_DEPS@
libtool: $(LIBTOOL_DEPS)
	$(SHELL) ./config.status --recheck

LIBTOOL = $(SHELL) @abs_top_builddir@/libtool
CXXCOMPILE = $(LIBTOOL) --silent --tag=CXX --mode=compile $(CXX) $(CXXFLAGS)
CXXLINK = $(LIBTOOL) --silent --tag=CXX --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@

# main build variables
CXXFLAGS            += -Wall -Wno-multichar

VERSION             = @PACKAGE_VERSION@
DIST_NAME           = @PACKAGE_NAME@-@PACKAGE_VERSION@

OUTPUT_DIR			?= ./lib

# documentation rules
@BUILD_DOCS_TRUE@BUILD_DOCS			= 1
BJAM				= @BJAM@

# targets

$(OUTPUT_DIR):
	mkdir -p $(OUTPUT_DIR)

ZEEP_LIB_PARTS		= xml json http

define ZEEPLIB_template = 

 .PHONY: $(1)_clean
 $(1)_clean:
	+$(MAKE) -C lib-$(1) clean

 .PHONY: $(1)_test
 $(1)_test: libraries
	+$(MAKE) -C lib-$(1) test

.PHONY: lib-$(1)
lib-$(1):
	+$(MAKE) -C lib-$(1) lib

endef

$(foreach part,$(ZEEP_LIB_PARTS),$(eval $(call ZEEPLIB_template,$(part))))

.PHONY: libraries | $(OUTPUT_DIR)
libraries: $(ZEEP_LIBS:%=lib-%)

.PHONY: test
test: $(ZEEP_LIB_PARTS:%=%_test)

.PHONY: examples
examples: libraries
	+$(MAKE) -C examples all

.PHONY: doc
ifeq "$(BUILD_DOCS)" "1"
doc:
	cd doc; $(BJAM)
else
doc:
	echo "Documentation was not enabled, use the --enable-documentation flag with configure"
endif

.PHONY: all	
all: libraries
ifeq "$(BUILD_DOCS)" "1"
all: doc
endif

# Install the libraries
.PHONY: install-libs
install-libs: libraries
	install -d $(libdir)
	for lib in $(ZEEP_LIB_PARTS); do \
		$(LIBTOOL) --mode=install install lib-$${lib}/libzeep-$${lib}.la $(libdir);\
	done

# Install header files and .pc files
.PHONY: install-dev
install-dev: libraries
	for dir in . ./http ./json ./xml ; do \
		install -d $(includedir)/zeep/$${dir}; \
		for hdr in include/zeep/$${dir}/*.hpp ; do \
			install $${hdr} $(includedir)/zeep/$${dir}; \
		done; \
	done
	install -d $(pkgconfigdir)
	for lib in $(ZEEP_LIB_PARTS); do \
		install -m 644 lib-$${lib}/libzeep-$${lib}.pc $(pkgconfigdir)/libzeep-$${lib}.pc; \
	done

.PHONY: install-doc
install-doc: doc
	cd doc; for d in `find html -type d`; do install -d $(docdir)/libzeep-doc/$$d; done
	cd doc; for f in `find html -type f`; do install $$f $(docdir)/libzeep-doc/$$f; done
	mkdir $(DIST_NAME)
	git archive master | tar -x -C $(DIST_NAME)
	cd $(DIST_NAME); tar cvf ../examples.tgz examples/
	install examples.tgz $(docdir)/libzeep-doc/examples.tgz
	rm -rf $(DIST_NAME) examples.tgz

.PHONY: install
install: install-libs install-dev
ifeq "$(BUILD_DOCS)" "1"
	+$(MAKE) install-doc
endif

.PHONY: clean
clean: $(ZEEP_LIB_PARTS:%=%_clean)
	rm -rf lib/*
	$(MAKE) -C examples clean
	cd doc; $$(which $(BJAM) > /dev/null) && $(BJAM) clean || echo "No $(BJAM) installed, cannot clean doc"
	rm -f $(DIST_NAME).tgz

.PHONY: dist
dist: doc
	rm -rf $(DIST_NAME)
	mkdir $(DIST_NAME)
	git archive master | tar -x -C $(DIST_NAME)
	find doc/html -depth | cpio -pd $(DIST_NAME)
	tar czf $(DIST_NAME).tgz $(DIST_NAME)
	rm -rf $(DIST_NAME)

.PHONY: FORCE
FORCE:
